// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	constants "Payment-Gateway/internal/constants"
	dtos "Payment-Gateway/internal/dtos"
	gateway "Payment-Gateway/internal/gateway"
	models "Payment-Gateway/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// HandleCallback mocks base method.
func (m *MockCallback) HandleCallback(req dtos.HandleCallbackRequest) (*dtos.HandleCallbackResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCallback", req)
	ret0, _ := ret[0].(*dtos.HandleCallbackResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleCallback indicates an expected call of HandleCallback.
func (mr *MockCallbackMockRecorder) HandleCallback(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCallback", reflect.TypeOf((*MockCallback)(nil).HandleCallback), req)
}

// MockDeposit is a mock of Deposit interface.
type MockDeposit struct {
	ctrl     *gomock.Controller
	recorder *MockDepositMockRecorder
}

// MockDepositMockRecorder is the mock recorder for MockDeposit.
type MockDepositMockRecorder struct {
	mock *MockDeposit
}

// NewMockDeposit creates a new mock instance.
func NewMockDeposit(ctrl *gomock.Controller) *MockDeposit {
	mock := &MockDeposit{ctrl: ctrl}
	mock.recorder = &MockDepositMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeposit) EXPECT() *MockDepositMockRecorder {
	return m.recorder
}

// CreateAndProcessDeposit mocks base method.
func (m *MockDeposit) CreateAndProcessDeposit(req *models.DepositRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndProcessDeposit", req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndProcessDeposit indicates an expected call of CreateAndProcessDeposit.
func (mr *MockDepositMockRecorder) CreateAndProcessDeposit(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndProcessDeposit", reflect.TypeOf((*MockDeposit)(nil).CreateAndProcessDeposit), req)
}

// MockWithdrawal is a mock of Withdrawal interface.
type MockWithdrawal struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalMockRecorder
}

// MockWithdrawalMockRecorder is the mock recorder for MockWithdrawal.
type MockWithdrawalMockRecorder struct {
	mock *MockWithdrawal
}

// NewMockWithdrawal creates a new mock instance.
func NewMockWithdrawal(ctrl *gomock.Controller) *MockWithdrawal {
	mock := &MockWithdrawal{ctrl: ctrl}
	mock.recorder = &MockWithdrawalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawal) EXPECT() *MockWithdrawalMockRecorder {
	return m.recorder
}

// CreateAndProcessWithdrawal mocks base method.
func (m *MockWithdrawal) CreateAndProcessWithdrawal(req *models.WithdrawalRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndProcessWithdrawal", req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndProcessWithdrawal indicates an expected call of CreateAndProcessWithdrawal.
func (mr *MockWithdrawalMockRecorder) CreateAndProcessWithdrawal(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndProcessWithdrawal", reflect.TypeOf((*MockWithdrawal)(nil).CreateAndProcessWithdrawal), req)
}

// MockGatewayPool is a mock of GatewayPool interface.
type MockGatewayPool struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayPoolMockRecorder
}

// MockGatewayPoolMockRecorder is the mock recorder for MockGatewayPool.
type MockGatewayPoolMockRecorder struct {
	mock *MockGatewayPool
}

// NewMockGatewayPool creates a new mock instance.
func NewMockGatewayPool(ctrl *gomock.Controller) *MockGatewayPool {
	mock := &MockGatewayPool{ctrl: ctrl}
	mock.recorder = &MockGatewayPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayPool) EXPECT() *MockGatewayPoolMockRecorder {
	return m.recorder
}

// GetAllGateways mocks base method.
func (m *MockGatewayPool) GetAllGateways() ([]gateway.PaymentGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGateways")
	ret0, _ := ret[0].([]gateway.PaymentGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGateways indicates an expected call of GetAllGateways.
func (mr *MockGatewayPoolMockRecorder) GetAllGateways() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGateways", reflect.TypeOf((*MockGatewayPool)(nil).GetAllGateways))
}

// GetRoundRobinGateway mocks base method.
func (m *MockGatewayPool) GetRoundRobinGateway() (gateway.PaymentGateway, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoundRobinGateway")
	ret0, _ := ret[0].(gateway.PaymentGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoundRobinGateway indicates an expected call of GetRoundRobinGateway.
func (mr *MockGatewayPoolMockRecorder) GetRoundRobinGateway() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoundRobinGateway", reflect.TypeOf((*MockGatewayPool)(nil).GetRoundRobinGateway))
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// CreateAndProcessDeposit mocks base method.
func (m *MockTransaction) CreateAndProcessDeposit(req *models.DepositRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndProcessDeposit", req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndProcessDeposit indicates an expected call of CreateAndProcessDeposit.
func (mr *MockTransactionMockRecorder) CreateAndProcessDeposit(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndProcessDeposit", reflect.TypeOf((*MockTransaction)(nil).CreateAndProcessDeposit), req)
}

// CreateAndProcessWithdrawal mocks base method.
func (m *MockTransaction) CreateAndProcessWithdrawal(req *models.WithdrawalRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndProcessWithdrawal", req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndProcessWithdrawal indicates an expected call of CreateAndProcessWithdrawal.
func (mr *MockTransactionMockRecorder) CreateAndProcessWithdrawal(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndProcessWithdrawal", reflect.TypeOf((*MockTransaction)(nil).CreateAndProcessWithdrawal), req)
}

// UpdateStatus mocks base method.
func (m *MockTransaction) UpdateStatus(id string, status constants.TransactionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTransactionMockRecorder) UpdateStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTransaction)(nil).UpdateStatus), id, status)
}
